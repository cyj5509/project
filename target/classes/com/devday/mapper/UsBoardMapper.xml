<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="com.devday.mapper.UsBoardMapper">

<!-- 게시글 등록 -->
<insert id="register" parameterType="com.devday.domain.BoardVO">
	INSERT INTO 
   		board_table (bd_number, bd_type, us_id, bd_title, bd_content, bd_register_date, bd_guest_nickname, bd_guest_pw)
	VALUES
		(sequence_bd_number.NEXTVAL, #{bd_type}, #{us_id}, #{bd_title}, #{bd_content}, SYSDATE, 
		<choose>
             <when test="bd_guest_nickname != null and bd_guest_nickname != ''">
                 #{bd_guest_nickname}
             </when>
             <otherwise>
                 NULL
             </otherwise>
         </choose>,
         <choose>
             <when test="bd_guest_pw != null and bd_guest_pw != ''">
                 #{bd_guest_pw}
             </when>
             <otherwise>
                 NULL
             </otherwise>
         </choose>
         )
</insert>

<!-- 게시글 조회 또는 수정 -->
<select id="get" resultType="com.devday.domain.BoardVO" parameterType="Long">
	SELECT
		bd_number, bd_type, us_id, bd_title, bd_content, bd_register_date, bd_update_date, bd_view_count, bd_guest_nickname, bd_guest_pw 
	FROM
		board_table
	WHERE
		bd_number = #{bd_number}
</select>

<!-- 전체 목록(여러 개) ─ resultType="" -->
<select id="getList" resultType="com.devday.domain.BoardVO">
	SELECT
		bd_number, bd_type, us_id, bd_title, bd_content, bd_register_date, bd_update_date, bd_view_count, bd_guest_nickname
	FROM
		board_table
	ORDER BY
		bd_number DESC
</select> 

<!-- 동적 쿼리 ─ 공통된 SQL 구문 작업을 하기 위한 용도: 검색 조건 -->
<sql id="criteria">
	<trim prefix="(" suffix=") AND" prefixOverrides="OR">
	<!-- collection은 getTypeArr() 메서드 호출, item은 의미 없음 -->
	<!-- 파라미터가 Map이기 때문에 'cri.'의 형태로 접근해줘야 한다. -->
    	<foreach collection="cri.typeArr" item="type">
			<trim prefix="OR">
			    <choose>
			        <when test="type == 'T'.toString()">
			            bd_title LIKE '%' || #{cri.keyword} || '%' 
			        </when>
			        <when test="type == 'I'.toString()">
			            us_id LIKE '%' || #{cri.keyword} || '%' 
			        </when>
			        <when test="type == 'C'.toString()">
			            bd_content LIKE '%' || #{cri.keyword} || '%' 
			        </when>
			    </choose>
			</trim>
    	</foreach>
	</trim>
</sql>

<!-- 페이징 목록(여러 개) ─ resultType="" -->
<!-- CDATA 섹션: XML 관점에서 적합한지에 대해 문법 검사를 하지 않음 -->
<select id="getListWithPaging" resultType="com.devday.domain.BoardVO" parameterType="map">
	<![CDATA[
	SELECT
		bd_number, bd_type, us_id, bd_guest_nickname, bd_title, bd_content, bd_register_date, bd_update_date, bd_view_count
	FROM 
		(
	    SELECT /*+ INDEX_DESC(board_table pk_bd_number) */
	    		ROWNUM rn, bd_number, bd_type, us_id, bd_guest_nickname, bd_title, bd_content, bd_register_date, bd_update_date, bd_view_count
	    FROM
	    		board_table 
	    WHERE
			]]>
			<if test="bd_type != null and bd_type != 'total'">
                bd_type = #{bd_type}
                AND
            </if>
			<include refid="criteria"></include> 
			<![CDATA[
	     	ROWNUM <= #{cri.pageNum} * #{cri.amount}
	    )
	WHERE
		rn > (#{cri.pageNum} - 1) * #{cri.amount}
	]]>
</select>

<!--  전체 데이터 개수 -->
<select id="getTotalCount" resultType="int" parameterType="map">
	SELECT
		COUNT(*)
	FROM
		board_table
	WHERE 
		<if test="bd_type != null and bd_type != 'total'">
            bd_type = #{bd_type}
            AND
        </if>
		<include refid="criteria"></include> bd_number > 0
</select>


<!-- 조회수 증가 -->
<update id="readCount" parameterType="Long">
	UPDATE
		board_table
	SET
		bd_view_count = bd_view_count + 1
	WHERE
		bd_number = #{bd_number}
</update>

<!-- 추천/비추천 수 조회: LEFT JOIN으로 처리, resultMap의 값은 id와 일치해야 함 -->
<select id="getVoteAction" resultMap="BoardVoteMap" parameterType="Long">
	<!-- 1. ANSI 표준 조인(Standard Join) -->
    SELECT
        b.*, <!-- 게시판 테이블의 모든 컬럼 -->
        v.vt_like_count, v.vt_dislike_count
    FROM
        board_table b
    RIGHT JOIN
        vote_table v 
    ON 
    	b.bd_number = v.bd_number
    WHERE
        b.bd_number = #{bd_number}
    <!-- 2. 오라클 조인(Oracle Join) --> 
	<!--
	SELECT
        b.*,
        v.vt_status, v.vt_like_count, v.vt_dislike_count 
	FROM
    	board_table b, vote_table v
	WHERE
   		b.bd_number = v.bd_number(+)
	AND
    	b.bd_number = #{bd_number};   
    -->      
</select>

<!-- 독립된 하나의 게시물에 대해 다수의 투표 정보가 들어 있어 아래와 같이 처리 -->
<!-- <association>은 일대일 또는 일대다의 경우, <collection>은 다대일의 경우 -->
<resultMap id="BoardVoteMap" type="BoardVoteVO">
    <collection property="boardVO" ofType="BoardVO"> <!-- javaType 대신 별도의 resultMap 생성해도 처리 가능 -->
        <!-- BoardVO 매핑을 위한 필드 선언 -->
        <id property="bd_number" column="bd_number" />
        <result property="bd_type" column="bd_type" />
        <result property="us_id" column="us_id" />
        <result property="bd_title" column="bd_title" />
        <result property="bd_content" column="bd_content" />
        <result property="bd_register_date" column="bd_register_date" />
        <result property="bd_update_date" column="bd_update_date" />
        <result property="bd_view_count" column="bd_view_count" />
        <result property="bd_guest_nickname" column="bd_guest_nickname" />
        <result property="bd_guest_pw" column="bd_guest_pw" />
    </collection>
    <collection property="voteVO" ofType="VoteVO"> <!-- ofType 대신 별도의 resultMap 생성해도 처리 가능 -->
        <!-- VoteVO 매핑을 위한 필드 선언 -->
        <result property="vt_like_count" column="vt_like_count" />
        <result property="vt_dislike_count" column="vt_dislike_count" />        
    </collection>
</resultMap>


<!-- 추천/비추천 처리 -->
<!-- parameterType과 관련하여 별칭 사용(mybatis-config.xml 참고) -->
<insert id="insertVote" parameterType="VoteVO">
    INSERT INTO
    		vote_table (vt_number, us_id, bd_number, vt_status)
    VALUES (
    		sequence_vt_number.NEXTVAL, 
    		#{us_id}, 
    		#{bd_number}, 
    		#{vt_status}
    	)
</insert>

<!-- 추천/비추천 여부 확인: 특정 게시물, 특정 사용자, 이전 날짜 -->
<select id="checkVote" resultType="int" parameterType="map">
    SELECT
        COUNT(*)
    FROM 
        vote_table
    WHERE 
        bd_number = #{bd_number}
	    AND <!-- 날짜 부분만 반환(시간 부분 제거) -->
	    	<![CDATA[
	    		TRUNC(SYSDATE) > TRUNC(vt_register_date) 
	    	]]>
	    AND (
        	us_id IS NULL OR
        	us_id = #{us_id}
        )
</select>

<!-- 추천/비추천 상태 확인: 특정 게시물, 특정 사용자, 동일 날짜 -->
<select id="getCurrentVoteStatus" resultType="map" parameterType="map">
	SELECT 
		'Member' as "userType", vt_status as "vt_status" <!-- 별칭이 아닌 이상 반환 컬럼명은 대문자 -->
	FROM (
		SELECT
			vt_status
	    FROM
	    	vote_table
	    WHERE
	    	bd_number = #{bd_number}
	    	AND 
	    		us_id = #{us_id}
	    ORDER BY
	    	vt_register_date DESC
	)
	WHERE
		ROWNUM = 1
	UNION ALL <!-- UNION ALL은 UNION과 달리 중복을 제거하지 않음 -->
	SELECT
		'NonMember' as "userType", vt_status as "vt_status"
	FROM (
	    SELECT 
	    	vt_status
	    FROM 
	    	vote_table
	    WHERE 
	    	bd_number = #{bd_number}
	    	AND 
	    		us_id IS NULL
	    ORDER BY 
	    	vt_register_date DESC
	)
	WHERE 
		ROWNUM = 1
</select>

<!-- 추천/비추천 상태 취소: 같은 상태로 다시 선택하는 경우 -->
<update id="cancelVote" parameterType="VoteVO">
    UPDATE
    	vote_table
    SET
    	vt_status = 'none'  <!-- 회원 또는 비회원이 선택하지 않은 경우-->
    WHERE
    	bd_number = #{bd_number}
      	AND 
      		TRUNC(vt_register_date) = TRUNC(SYSDATE)
    	AND (
        	us_id IS NULL OR
        	us_id = #{us_id}
        )
</update>

<!-- 추천/비추천 상태 변경: 다른 상태로 다시 투표하는 경우 -->
<update id="changeVote" parameterType="VoteVO">
    UPDATE
    	vote_table
    SET
    	vt_status = #{vt_status}
    WHERE
    	bd_number = #{bd_number}
      	AND 
      		TRUNC(vt_register_date) = TRUNC(SYSDATE)
      	AND (
        	us_id IS NULL OR
        	us_id = #{us_id}
        )
</update>

<!-- 추천 수 증가 -->
<update id="increaseLike" parameterType="Long">
    UPDATE
    	vote_table
    SET 
    	vt_like_count = vt_like_count + 1
    WHERE
    	bd_number = #{bd_number}
</update>

<!-- 비추천 수 증가 -->
<update id="increaseDislike" parameterType="Long">
    UPDATE
   		vote_table
    SET
   		vt_dislike_count = vt_dislike_count + 1
    WHERE
   		bd_number = #{bd_number}
</update>

<!-- 추천 수 감소 -->
<update id="decreaseLike" parameterType="Long">
    UPDATE
        vote_table
    SET
        vt_like_count = vt_like_count - 1
    WHERE
        bd_number = #{bd_number} AND vt_like_count > 0
</update>

<!-- 비추천 수 감소 -->
<update id="decreaseDislike" parameterType="Long">
    UPDATE
        vote_table
    SET
        vt_dislike_count = vt_dislike_count - 1
    WHERE
        bd_number = #{bd_number} AND vt_dislike_count > 0
</update>

<!-- 게시물 수정 -->
<update id="modify" parameterType="com.devday.domain.BoardVO">
	UPDATE
		board_table
	SET
		bd_type = #{bd_type},
		bd_title = #{bd_title},
		bd_content = #{bd_content},
		bd_update_date = SYSDATE
	WHERE
		bd_number = #{bd_number}
</update>

<!-- 게시물 삭제 -->
<delete id="delete" parameterType="Long">
	DELETE FROM
		board_table
	WHERE
		bd_number = #{bd_number}
</delete>

</mapper>